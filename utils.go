package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"strconv"
	"time"
)

var (
	tgPort          = os.Getenv("ROSNOUBOT_TGPORT")
	tgURL           = os.Getenv("ROSNOUBOT_TGURL")
	tgToken         = os.Getenv("ROSNOUBOT_TGTOKEN")
	tgAdminID, _    = strconv.Atoi(os.Getenv("ROSNOUBOT_TGADMINID"))
	mysqlConnection = os.Getenv("ROSNOUBOT_MYSQL")
)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–∞–π—Å–µ –∏–ª–∏ –º–∞—Å—Å–∏–≤–µ
func sliceContains(a []string, x string) bool {
	for _, n := range a {
		if x == n {
			return true
		}
	}
	return false
}

// –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –∏–∑ –ø–æ—Ç–æ–∫–∞
func writeFile(filepath string, f io.ReadCloser) error {
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()
	_, err = io.Copy(out, f)
	return err
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
func removeFile(filepath string) error {
	err := os.Remove(filepath)
	return err
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
func checkerr(err error) {
	if err != nil {
		log.Fatal("[FATAL]", err)
	}
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É (time pkg)
func weekdayString(date string) string {
	weekday, _ := time.Parse("02.01.2006", date)
	switch weekday.Weekday() {
	case 0:
		return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
	case 1:
		return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
	case 2:
		return "–í—Ç–æ—Ä–Ω–∏–∫"
	case 3:
		return "–°—Ä–µ–¥–∞"
	case 4:
		return "–ß–µ—Ç–≤–µ—Ä–≥"
	case 5:
		return "–ü—è—Ç–Ω–∏—Ü–∞"
	case 6:
		return "–°—É–±–±–æ—Ç–∞"
	}
	return "impossible error"
}

// –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –¥–µ–Ω—å –∏–∑ —Å–ª–∞–π—Å–∞ work-–æ–≤
func dayToMsg(day []work, group string, date string) string {
	var msg string

	datet, _ := time.Parse("2006-01-02", date)
	date = datet.Format("02.01.2006")
	msg = fmt.Sprintf("üìÖ  *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s, %s %s*\n\n", weekdayString(date), date, "["+group+"]")
	if len(day) == 0 {
		msg += "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
		return msg
	}
	if day[0].dayoff {
		msg += "ü§ü  –í—ã—Ö–æ–¥–Ω–æ–π!"
		return msg
	}
	for _, w := range day {
		msg += fmt.Sprintf("_%s_\n*%s*\n%s ", w.time, w.subject, w.workType)
		if w.comment != "" {
			msg += fmt.Sprintf("(%s)", w.comment)
		}
		if w.campus != "" {
			msg += fmt.Sprintf("\n%s", w.campus)
		}
		msg += "\n\n"
	}
	return msg
}
