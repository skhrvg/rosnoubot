package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tb "gopkg.in/tucnak/telebot.v2"
)

func main() {
	log.Println("[BOT]", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É...")
	log.Println("[CONFIG]", "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç:", tgPort)
	log.Println("[CONFIG]", "Webhook URL:", tgURL)
	log.Println("[CONFIG]", "Telegram token:", tgToken)
	log.Println("[CONFIG]", "Telegram admin userid:", tgAdminID)
	log.Println("[CONFIG]", "–ë–î MySQL:", mysqlConnection)

	// –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
	b, err := tb.NewBot(tb.Settings{
		Token: tgToken,
		Poller: &tb.Webhook{
			Listen:   ":" + tgPort,
			Endpoint: &tb.WebhookEndpoint{PublicURL: tgURL},
		},
	})
	if err != nil {
		log.Fatal("[FATAL]", err)
	}

	// –†–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	keyboardSetup1 := [][]tb.ReplyButton{
		[]tb.ReplyButton{tb.ReplyButton{Text: "–ò–ò–°–∏–ò–ö–¢"}},
		[]tb.ReplyButton{tb.ReplyButton{Text: "–ò–ì–¢"}, tb.ReplyButton{Text: "–ò–ë–¢"}},
		[]tb.ReplyButton{tb.ReplyButton{Text: "–ò–≠–£–∏–§"}, tb.ReplyButton{Text: "–Æ–ò"}},
		[]tb.ReplyButton{tb.ReplyButton{Text: "–ò–ü–∏–ü"}, tb.ReplyButton{Text: "–ù–ò"}},
	}
	keyboardSetup2 := [][]tb.ReplyButton{
		[]tb.ReplyButton{tb.ReplyButton{Text: "–û—á–Ω–∞—è"}},
		[]tb.ReplyButton{tb.ReplyButton{Text: "–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è"}},
		[]tb.ReplyButton{tb.ReplyButton{Text: "–ó–∞–æ—á–Ω–∞—è"}},
	}
	keyboardSetup3 := [][]tb.ReplyButton{
		[]tb.ReplyButton{tb.ReplyButton{Text: "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"}},
		[]tb.ReplyButton{tb.ReplyButton{Text: "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"}},
	}
	runSQLBtn := tb.InlineButton{Text: "Run SQL", Unique: "runSQL"}
	keyboardParse := [][]tb.InlineButton{
		[]tb.InlineButton{runSQLBtn},
	}
	broadcastConfirmBtn := tb.InlineButton{Text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", Unique: "broadcastConfirmBtn"}
	keyboardBroadcast := [][]tb.InlineButton{
		[]tb.InlineButton{broadcastConfirmBtn},
	}
	keyboardMain := [][]tb.ReplyButton{
		[]tb.ReplyButton{tb.ReplyButton{Text: "üìÖ  –°–µ–≥–æ–¥–Ω—è"}, tb.ReplyButton{Text: "üìÖ  –ó–∞–≤—Ç—Ä–∞"}},
		[]tb.ReplyButton{tb.ReplyButton{Text: "üìÖ  –≠—Ç–∞ –Ω–µ–¥–µ–ª—è"}, tb.ReplyButton{Text: "üìÖ  –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è"}},
		[]tb.ReplyButton{tb.ReplyButton{Text: "üîÑ  –ò–∑–º. –≥—Ä—É–ø–ø—É"}, tb.ReplyButton{Text: "‚ö†Ô∏è  –ù–∞—à–ª–∏ –æ—à–∏–±–∫—É?"}},
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å screen = ResetRequired
	cmdResetRequired := func(m *tb.Message) {
		b.Send(m.Sender, "‚ö†Ô∏è  *–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –ü–†–û–§–ò–õ–Ø –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•*\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /reset.",
			&tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	cmdResetUserSettings := func(m *tb.Message) {
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		userSetScreen(m.Sender.ID, "setup1")
		b.Send(m.Sender, "ü§ñ  *–ü—Ä–∏–≤–µ—Ç!*\n\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –†–æ—Å–ù–û–£. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞.\n\n_–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è \"–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º\" –∏ –Ω–∏–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –†–æ—Å–ù–û–£. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–∞—è –±–æ—Ç–æ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–π –∏–ª–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π. –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É –≤ –õ–° (@skhrvg) –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏._",
			tb.ParseMode("Markdown"))
		b.Send(m.Sender, "üõ†Ô∏è  *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ [1/4]*\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç.",
			&tb.ReplyMarkup{ReplyKeyboard: keyboardSetup1}, tb.ParseMode("Markdown"))
		b.Send(m.Sender, "‚ÑπÔ∏è  *–ü–æ–¥—Å–∫–∞–∑–∫–∞:*\n\n_–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å 4 –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞._",
			tb.ParseMode("Markdown"))
	}
	b.Handle("/start", cmdResetUserSettings)
	b.Handle("/reset", cmdResetUserSettings)
	b.Handle("üîÑ  –ò–∑–º. –≥—Ä—É–ø–ø—É", cmdResetUserSettings)

	// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è screen –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é (main) –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.Handle("/cancel", func(m *tb.Message) {
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		if sliceContains([]string{"parse", "report"}, userGetScreen(m.Sender.ID)) {
			userSetScreen(m.Sender.ID, "main")
			b.Send(m.Sender, "‚õîÔ∏è  *–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.*", &tb.ReplyMarkup{ReplyKeyboard: keyboardMain, ResizeReplyKeyboard: true},
				tb.ParseMode("Markdown"))
		}
	})

	// WIP: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	b.Handle("/parseall", func(m *tb.Message) {
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		if m.Sender.ID == tgAdminID {
			institute := strings.Split(m.Text, " ")[1]
			folder, _ := os.Open("parser/")
			names, _ := folder.Readdir(-1)
			folder.Close()
			for _, file := range names {
				filename := "parser/" + file.Name()
				group := strings.Split(file.Name(), ".")[0]
				log.Printf(group)
				logs, rawSQL, _ := parse(filename, group, institute, "–û—á–Ω–∞—è", "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
					3, time.Date(2020, 2, 3, 0, 0, 0, 0, time.Now().UTC().Location()))
				log.Printf(logs)
				f, _ := os.Create("temp/" + group + ".sql")
				f.WriteString(rawSQL)
				f.Close()
			}
		}
	})
	b.Handle("/confirmall", func(m *tb.Message) {
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		if m.Sender.ID == tgAdminID {
			folder, _ := os.Open("temp/")
			names, _ := folder.Readdir(-1)
			folder.Close()
			for _, file := range names {
				group := strings.Split(file.Name(), ".")[0]
				log.Println("[DB]", "Uploading", group)
				fileExec("temp/" + group + ".sql")
			}
		}
	})

	// –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î
	// –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	var parseArgs []string
	b.Handle("/parse", func(m *tb.Message) {
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		if m.Sender.ID == tgAdminID {
			parseArgs = strings.Split(m.Text, " ")[1:]
			userSetScreen(m.Sender.ID, "parse")
			b.Send(m.Sender, fmt.Sprintf("*–†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:*\n%s (%s, %s, %s)", parseArgs[0], parseArgs[1], "–û—á–Ω–∞—è", "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"),
				tb.ParseMode("Markdown"))
		}
	})
	b.Handle(&runSQLBtn, func(c *tb.Callback) {
		err := fileExec("temp/" + parseArgs[0] + ".sql")
		b.Respond(c, &tb.CallbackResponse{Text: fmt.Sprintln(err), ShowAlert: true})
		removeFile("temp/" + parseArgs[0] + ".sql")
	})
	b.Handle(tb.OnDocument, func(m *tb.Message) {
		if userGetScreen(m.Sender.ID) == "parse" {
			userSetScreen(m.Sender.ID, "main")
			xlfile, _ := b.GetFile(m.Document.MediaFile())
			writeFile("temp/"+parseArgs[0]+".xlsx", xlfile)
			logs, rawSQL, _ := parse("temp/"+parseArgs[0]+".xlsx", parseArgs[0], parseArgs[1], "–û—á–Ω–∞—è", "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
				3, time.Date(2020, 2, 3, 0, 0, 0, 0, time.Now().UTC().Location()))
			log.Printf(logs)
			f, err := os.Create("temp/" + parseArgs[0] + ".sql")
			f.WriteString(rawSQL)
			f.Close()
			b.Send(m.Sender, "`"+logs+"`", tb.ParseMode("Markdown"))
			_, err = b.Send(m.Sender, &tb.Document{File: tb.FromDisk("temp/" + parseArgs[0] + ".sql"), FileName: parseArgs[0] + ".sql"},
				&tb.ReplyMarkup{InlineKeyboard: keyboardParse})
			if err != nil {
				log.Println("[WARN]", err)
			}
			removeFile("temp/" + parseArgs[0] + ".xlsx")
			parseArgs = nil
		}
	})

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ id
	// –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	b.Handle("/send", func(m *tb.Message) {
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		if m.Sender.ID == tgAdminID {
			args := strings.SplitN(m.Text, " ", 3)[1:]
			intID, _ := strconv.Atoi(args[0])
			b.Send(&tb.User{ID: intID}, fmt.Sprintf("üí¨  *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n%s", args[1]), tb.ParseMode("Markdown"))
			b.Send(&tb.User{ID: tgAdminID}, fmt.Sprintf("*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s:*\n\n%s", args[0], args[1]), tb.ParseMode("Markdown"))
		}
	})

	// –†–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	// –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	var broadcastUserList []string
	var broadcastMessage string
	var broadcastTarget string
	b.Handle("/broadcast", func(m *tb.Message) {
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		if m.Sender.ID == tgAdminID {
			args := strings.SplitN(m.Text, " ", 4)[1:]
			broadcastUserList = getUserIDs(args[0], args[1])
			broadcastMessage = args[2]
			broadcastTarget = args[1]
			b.Send(&tb.User{ID: tgAdminID}, fmt.Sprintf("*–ü–æ–¥—Ç–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (*`WHERE %s = %s`*):*\n\n%s", len(broadcastUserList), args[0], args[1], broadcastMessage),
				&tb.ReplyMarkup{InlineKeyboard: keyboardBroadcast}, tb.ParseMode("Markdown"))
		}
	})
	b.Handle(&broadcastConfirmBtn, func(c *tb.Callback) {
		counter := 0
		for _, uID := range broadcastUserList {
			intID, _ := strconv.Atoi(uID)
			_, err := b.Send(&tb.User{ID: intID}, fmt.Sprintf("üí¨  *–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è %s:*\n\n%s", broadcastTarget, broadcastMessage), tb.ParseMode("Markdown"))
			log.Println("[CHAT]", "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", uID)
			if err != nil {
				log.Println("[WARN]", err)
			} else {
				counter++
			}
		}
		b.Respond(c, &tb.CallbackResponse{Text: fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", counter), ShowAlert: true})
		b.Send(&tb.User{ID: tgAdminID}, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", &tb.ReplyMarkup{ReplyKeyboard: keyboardMain, ResizeReplyKeyboard: true}, tb.ParseMode("Markdown"))
		broadcastUserList = nil
		broadcastMessage = ""
		broadcastTarget = ""
	})

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î, —Å–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
	sendSchedule := func(m *tb.Message) {
		var iStart, iLimit int
		switch m.Text {
		case "üìÖ  –°–µ–≥–æ–¥–Ω—è":
			iStart, iLimit = 0, 1
		case "üìÖ  –ó–∞–≤—Ç—Ä–∞":
			iStart, iLimit = 1, 2
		case "üìÖ  –≠—Ç–∞ –Ω–µ–¥–µ–ª—è":
			iStart, iLimit = 0, 7-int(time.Now().Weekday())
		case "üìÖ  –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è":
			iStart, iLimit = 8-int(time.Now().Weekday()), 14-int(time.Now().Weekday())
		default:
			iStart, iLimit = 0, 0
		}
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		if userGetScreen(m.Sender.ID) == "main" {
			for i := iStart; i < iLimit; i++ {
				b.Send(m.Sender,
					dayToMsg(getDay(userGet(m.Sender.ID, "gr0up"), time.Now().AddDate(0, 0, i).Format("2006-01-02")), userGet(m.Sender.ID, "gr0up"), time.Now().AddDate(0, 0, i).Format("2006-01-02")),
					&tb.ReplyMarkup{ReplyKeyboard: keyboardMain, ResizeReplyKeyboard: true}, tb.ParseMode("Markdown"),
				)
			}
		} else {
			log.Println("[WARN]", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", m.Sender.ID, "–≤—ã–∑–≤–∞–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å —ç–∫—Ä–∞–Ω–∞ 'main'. –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω:", userGetScreen(m.Sender.ID))
		}
	}
	b.Handle("üìÖ  –°–µ–≥–æ–¥–Ω—è", sendSchedule)
	b.Handle("üìÖ  –ó–∞–≤—Ç—Ä–∞", sendSchedule)
	b.Handle("üìÖ  –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", sendSchedule)
	b.Handle("üìÖ  –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", sendSchedule)

	// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞
	b.Handle(tb.OnText, func(m *tb.Message) {
		log.Println("[CHAT]", m.Sender.ID, m.Sender.FirstName, m.Sender.LastName, "@"+m.Sender.Username, ">>>", m.Text)
		switch userGetScreen(m.Sender.ID) {

		// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
		case "setup1":
			if sliceContains([]string{"–ò–ò–°–∏–ò–ö–¢", "–ò–ì–¢", "–ò–ë–¢", "–ò–≠–£–∏–§", "–Æ–ò", "–ò–ü–∏–ü", "–ù–ò"}, m.Text) {
				userSetScreen(m.Sender.ID, "setup2")
				userSet(m.Sender.ID, "institute", m.Text)
				b.Send(m.Sender, "üõ†Ô∏è  *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ [2/4]*\n\n–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è.", &tb.ReplyMarkup{ReplyKeyboard: keyboardSetup2}, tb.ParseMode("Markdown"))
			} else {
				b.Send(m.Sender, "‚ö†Ô∏è  *–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç.*\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", &tb.ReplyMarkup{ReplyKeyboard: keyboardSetup1}, tb.ParseMode("Markdown"))
			}
		case "setup2":
			if sliceContains([]string{"–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è", "–ó–∞–æ—á–Ω–∞—è"}, m.Text) {
				userSetScreen(m.Sender.ID, "WIP-form")
				userSet(m.Sender.ID, "form", m.Text)
				b.Send(m.Sender, "‚ö†Ô∏è  *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è.*\n\n–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /reset.", &tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))
				break
			}
			if sliceContains([]string{"–û—á–Ω–∞—è", "–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è", "–ó–∞–æ—á–Ω–∞—è"}, m.Text) {
				userSetScreen(m.Sender.ID, "setup3")
				userSet(m.Sender.ID, "form", m.Text)
				b.Send(m.Sender, "üõ†Ô∏è  *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ [3/4]*\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è.", &tb.ReplyMarkup{ReplyKeyboard: keyboardSetup3}, tb.ParseMode("Markdown"))
			} else {
				b.Send(m.Sender, "‚ö†Ô∏è  *–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è.*\n\n–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", &tb.ReplyMarkup{ReplyKeyboard: keyboardSetup2}, tb.ParseMode("Markdown"))
			}
		case "setup3":
			if sliceContains([]string{"–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"}, m.Text) {
				userSetScreen(m.Sender.ID, "WIP-level")
				userSet(m.Sender.ID, "los", m.Text)
				b.Send(m.Sender, "‚ö†Ô∏è  *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è.*\n\n–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /reset.", &tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))
				break
			}
			if sliceContains([]string{"–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"}, m.Text) {
				userSetScreen(m.Sender.ID, "setup4")
				userSet(m.Sender.ID, "los", m.Text)
				groups := strings.Join(groupsList(userGet(m.Sender.ID, "institute"), userGet(m.Sender.ID, "form"), userGet(m.Sender.ID, "los")), ", ")
				if groups != "" {
					b.Send(m.Sender, "üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ [4/4]*\n\n–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.\n\n_–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"+groups+"_", &tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))
				} else {
					b.Send(m.Sender, "‚ö†Ô∏è  *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –Ω–∞—à–µ–ª –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–±—è.*\n\n–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /reset.", &tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))
				}
			} else {
				b.Send(m.Sender, "‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è.\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", &tb.ReplyMarkup{ReplyKeyboard: keyboardSetup3}, tb.ParseMode("Markdown"))
			}
		case "setup4":
			if sliceContains(groupsList(userGet(m.Sender.ID, "institute"), userGet(m.Sender.ID, "form"), userGet(m.Sender.ID, "los")), m.Text) {
				userSetScreen(m.Sender.ID, "main")
				userSet(m.Sender.ID, "gr0up", m.Text)
				b.Send(m.Sender, "‚úÖ  *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n–ö—Å—Ç–∞—Ç–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å, —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", &tb.ReplyMarkup{ReplyKeyboard: keyboardMain, ResizeReplyKeyboard: true}, tb.ParseMode("Markdown"))
			} else {
				b.Send(m.Sender, "‚ö†Ô∏è  *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –Ω–∞—à–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã "+m.Text+".*\n\n–ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reset —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –∏–ª–∏ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è.", &tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))
			}

		// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
		case "main":
			if m.Text == "‚ö†Ô∏è  –ù–∞—à–ª–∏ –æ—à–∏–±–∫—É?" {
				userSetScreen(m.Sender.ID, "report")
				b.Send(m.Sender, "*–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ!*\n\n–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–∏–¥–∏—Ç —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –≤ –ª–∏—á–∫—É.\n\n_–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π _/cancel_._",
					&tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))
			} else {
				t, err := time.Parse("02.01.2006", m.Text)
				if err == nil {
					b.Send(m.Sender,
						dayToMsg(getDay(userGet(m.Sender.ID, "gr0up"), t.Format("2006-01-02")), userGet(m.Sender.ID, "gr0up"), t.Format("2006-01-02")),
						&tb.ReplyMarkup{ReplyKeyboard: keyboardMain, ResizeReplyKeyboard: true}, tb.ParseMode("Markdown"),
					)
				} else {
					log.Println("[WARN]", err)
				}
			}

		// –≠–∫—Ä–∞–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
		case "report":
			userSetScreen(m.Sender.ID, "main")
			b.Send(&tb.User{ID: tgAdminID}, fmt.Sprintf("‚ö†Ô∏è  *REPORT*\n–ò–º—è: `%s`\n–§–∞–º–∏–ª–∏—è: `%s`\nUsername: @%s\nID: `%d`\n\n–ì—Ä—É–ø–ø–∞: `%s (%s | %s | %s)`", m.Sender.FirstName, m.Sender.LastName, m.Sender.Username, m.Sender.ID, userGet(m.Sender.ID, "gr0up"), userGet(m.Sender.ID, "institute"), userGet(m.Sender.ID, "form"), userGet(m.Sender.ID, "los")), tb.ParseMode("Markdown"))
			b.Forward(&tb.User{ID: tgAdminID}, m, tb.ParseMode("Markdown"))
			b.Send(m.Sender, "‚úÖ  *–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.*", &tb.ReplyMarkup{ReplyKeyboard: keyboardMain, ResizeReplyKeyboard: true}, tb.ParseMode("Markdown"))

		// –≠–∫—Ä–∞–Ω—ã "Not Implemented"
		case "WIP-form":
			b.Send(m.Sender, "‚ö†Ô∏è  *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è.*\n\n–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /reset.", &tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))
		case "WIP-level":
			b.Send(m.Sender, "‚ö†Ô∏è  *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ–±—É—á–µ–Ω–∏—è.*\n\n–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /reset.", &tb.ReplyMarkup{ReplyKeyboardRemove: true}, tb.ParseMode("Markdown"))

		// –≠–∫—Ä–∞–Ω –Ω–µ–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
		case "ResetRequired":
			cmdResetRequired(m)
		default:
			cmdResetRequired(m)
			userSetScreen(m.Sender.ID, "ResetReqired")
		}

	})

	// –°–¢–ê–†–¢–£–ï–ú!
	log.Println("[BOT]", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
	b.Start()
}
